'use client';

import { useState, useRef, useEffect } from 'react';

interface TavusVideoPlayerProps {
  videoUrl?: string;
  isVisible: boolean;
  studentName: string;
  onVideoEnd?: () => void;
}

export default function TavusVideoPlayer({ 
  videoUrl, 
  isVisible, 
  studentName, 
  onVideoEnd 
}: TavusVideoPlayerProps) {
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const videoRef = useRef<HTMLVideoElement>(null);

  useEffect(() => {
    if (videoUrl && videoRef.current) {
      videoRef.current.load();
    }
  }, [videoUrl]);

  const handlePlay = () => {
    if (videoRef.current) {
      videoRef.current.play();
      setIsPlaying(true);
    }
  };

  const handlePause = () => {
    if (videoRef.current) {
      videoRef.current.pause();
      setIsPlaying(false);
    }
  };

  const handleTimeUpdate = () => {
    if (videoRef.current) {
      setCurrentTime(videoRef.current.currentTime);
    }
  };

  const handleLoadedMetadata = () => {
    if (videoRef.current) {
      setDuration(videoRef.current.duration);
    }
  };

  const handleEnded = () => {
    setIsPlaying(false);
    onVideoEnd?.();
  };

  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  if (!isVisible || !videoUrl) {
    return null;
  }

  return (
    <div className="bg-purple-50 dark:bg-purple-900/20 rounded-lg p-4 mb-4 border border-purple-200 dark:border-purple-800">
      <div className="flex items-center justify-between mb-3">
        <h3 className="font-semibold text-purple-700 dark:text-purple-300">
          üé• AI Feedback Video for {studentName}
        </h3>
        <div className="text-sm text-purple-600 dark:text-purple-400">
          {formatTime(currentTime)} / {formatTime(duration)}
        </div>
      </div>
      
      <div className="relative">
        <video
          ref={videoRef}
          className="w-full h-64 bg-gray-900 rounded-lg object-cover"
          onTimeUpdate={handleTimeUpdate}
          onLoadedMetadata={handleLoadedMetadata}
          onEnded={handleEnded}
          controls={false}
        >
          <source src={videoUrl} type="video/mp4" />
          Your browser does not support the video tag.
        </video>
        
        {/* Custom Controls */}
        <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-4 rounded-b-lg">
          <div className="flex items-center gap-3">
            <button
              onClick={isPlaying ? handlePause : handlePlay}
              className="bg-purple-600 hover:bg-purple-700 text-white p-2 rounded-full transition-colors"
            >
              {isPlaying ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'}
            </button>
            
            <div className="flex-1 bg-gray-300 dark:bg-gray-600 h-2 rounded-full overflow-hidden">
              <div 
                className="bg-purple-600 h-full transition-all duration-100"
                style={{ width: `${(currentTime / duration) * 100}%` }}
              />
            </div>
            
            <div className="text-white text-sm font-mono">
              {formatTime(currentTime)}
            </div>
          </div>
        </div>
      </div>
      
      <div className="mt-3 text-center">
        <p className="text-sm text-purple-600 dark:text-purple-400">
          This personalized feedback was generated by your AI teaching assistant
        </p>
      </div>
    </div>
  );
}
